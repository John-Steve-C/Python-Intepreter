#ifndef PYTHON_INTERPRETER_EVALVISITOR_H
#define PYTHON_INTERPRETER_EVALVISITOR_H


#include "Python3BaseVisitor.h"
#include "scope.h"
#include "utils.h"

static Scope scope;

class EvalVisitor : public Python3BaseVisitor {

//todo:override all methods of Python3BaseVisitor
    virtual antlrcpp::Any visitFile_input(Python3Parser::File_inputContext *ctx) override {
        auto name = ctx->getText();
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitFuncdef(Python3Parser::FuncdefContext *ctx) override {
        // no func def
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitParameters(Python3Parser::ParametersContext *ctx) override {
        // no func def
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitStmt(Python3Parser::StmtContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitSimple_stmt(Python3Parser::Simple_stmtContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitSmall_stmt(Python3Parser::Small_stmtContext *ctx) override {
        return visitChildren(ctx);
    }

    //todo:赋值语句
    virtual antlrcpp::Any visitExpr_stmt(Python3Parser::Expr_stmtContext *ctx) override {
        if (ctx->augassign()) {//复合运算符"+="
            std::string op = ctx->augassign()->getText();
            auto testlistArray = ctx->testlist();
            std::string varName = testlistArray[0]->getText();
            int varData = visitTestlist(testlistArray[1]);
            bool flag = scope.varQuery(varName).first;//判断变量是否存在

            /*if (flag) {//已经存在,不用新增,直接修改即可
                scope;
                return 0;
            }*/
            if (op == "+=") {
                scope.varRegister(varName, varData + scope.varQuery(varName).second);//存储变量
            } else if (op == "-=") {
                scope.varRegister(varName, scope.varQuery(varName).second - varData);
            } else if (op == "*=") {
                scope.varRegister(varName, varData * scope.varQuery(varName).second);
            } else if (op == "//=") {//无法执行?
                scope.varRegister(varName, scope.varQuery(varName).second / varData);
            }

            return 0;
        }

        auto testlistArray = ctx->testlist();
        if (testlistArray.size() == 1) {
            visitTestlist(testlistArray[0]);
            return 0;
        } else if (testlistArray.size() > 2) {//连等运算
            auto varData = visitTestlist(testlistArray.back()).as<int>();//返回的类型变成int?
            for (auto i: testlistArray) {
                std::string varName = i->getText();
                scope.varRegister(varName, varData);
            }
            return 0;
        }

        std::string varName = testlistArray[0]->getText();
        int varData = visitTestlist(testlistArray[1]);

        scope.varRegister(varName, varData);//存储变量，默认变量名合法
        return 0;
    }

    virtual antlrcpp::Any visitFlow_stmt(Python3Parser::Flow_stmtContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitCompound_stmt(Python3Parser::Compound_stmtContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitIf_stmt(Python3Parser::If_stmtContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitWhile_stmt(Python3Parser::While_stmtContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitSuite(Python3Parser::SuiteContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitTest(Python3Parser::TestContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitOr_test(Python3Parser::Or_testContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitAnd_test(Python3Parser::And_testContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitNot_test(Python3Parser::Not_testContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitComparison(Python3Parser::ComparisonContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitArith_expr(Python3Parser::Arith_exprContext *ctx) override {
        auto termArray = ctx->term();
        if (termArray.size() == 1) return visitTerm(termArray[0]).as<int>();
        auto opArray = ctx->addorsub_op();
        auto ret = visitTerm(termArray[0]).as<int>();
        for (int i = 1; i < termArray.size(); ++i) {
            std::string tmpOp = opArray[i - 1]->getText();
            if (tmpOp == "+") ret += visitTerm(termArray[i]).as<int>();
            else if (tmpOp == "-") ret -= visitTerm(termArray[i]).as<int>();
//            else throw Exception("", UNIMPLEMENTED);
        }
        return ret;
    }

    virtual antlrcpp::Any visitTerm(Python3Parser::TermContext *ctx) override {
        auto factorArray = ctx->factor();
        if (factorArray.size() == 1) return visitFactor(factorArray[0]).as<int>();
        auto opArray = ctx->muldivmod_op();

        auto ret = visitFactor(factorArray[0]).as<int>();
        for (int i = 1; i < factorArray.size(); ++i) {
            std::string tmpOp = opArray[i - 1]->getText();
            if (tmpOp == "*") ret *= visitFactor(factorArray[i]).as<int>();
            else if (tmpOp == "//") ret /= visitFactor(factorArray[i]).as<int>();
//            else throw Exception("", UNIMPLEMENTED);
        }
        return ret;
    }

    virtual antlrcpp::Any visitFactor(Python3Parser::FactorContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitAtom_expr(Python3Parser::Atom_exprContext *ctx) override {
        if (!ctx->trailer()) return visitAtom(ctx->atom()).as<int>();
        auto functionName = ctx->atom()->getText();
        auto argsArray = visitTrailer(ctx->trailer()).as<std::vector<int>>();
//        if (argsArray.size() != 1) {
//            throw Exception(functionName, INVALID_FUNC_CALL);
//            return 0;
//        }
        if (functionName == "print") {
            std::cout << argsArray[0] << std::endl;
            return 0;
        }
//        throw Exception("", UNIMPLEMENTED);
    }

    virtual antlrcpp::Any visitTrailer(Python3Parser::TrailerContext *ctx) override {
        if (ctx->arglist()) return visitArglist(ctx->arglist());
        return std::vector<int>();
    }

    virtual antlrcpp::Any visitAtom(Python3Parser::AtomContext *ctx) override {
        if (ctx->NUMBER()) {
            return stringToInt(ctx->NUMBER()->getText());
        } else if (ctx->NAME()) {
            auto result = scope.varQuery(ctx->NAME()->getText());
            if (result.first) {//该变量存在
                return result.second;
            }
//            else throw Exception(ctx->NAME()->getText(), UNDEFINED);
        } else if (ctx->test()) return visitTest(ctx->test()).as<int>();
//        throw Exception("", UNIMPLEMENTED);
    }

    virtual antlrcpp::Any visitTestlist(Python3Parser::TestlistContext *ctx) override {
        return visitChildren(ctx);
    }

    virtual antlrcpp::Any visitArglist(Python3Parser::ArglistContext *ctx) override {
        auto argumentArray = ctx->argument();
        std::vector<int> retArray;
        for (auto ctx: argumentArray) {//建议使用这种遍历,可以提高效率
//            if (ctx->test().size() > 1) //多个数据
//                throw Exception("", UNIMPLEMENTED);
            retArray.push_back(visitTest(ctx->test()[0]));
        }
        return retArray;
    }

    virtual antlrcpp::Any visitArgument(Python3Parser::ArgumentContext *ctx) override {
        return visitChildren(ctx);
    }
};


#endif //PYTHON_INTERPRETER_EVALVISITOR_H
